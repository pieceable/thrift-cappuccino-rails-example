#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'shared_service'
require 'tutorial_types'

module Calculator
  class Client < SharedService::Client 
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def add(num1, num2)
      send_add(num1, num2)
      return recv_add()
    end

    def send_add(num1, num2)
      send_message('add', Add_args, :num1 => num1, :num2 => num2)
    end

    def recv_add()
      result = receive_message(Add_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add failed: unknown result')
    end

    def calculate(logid, w)
      send_calculate(logid, w)
      return recv_calculate()
    end

    def send_calculate(logid, w)
      send_message('calculate', Calculate_args, :logid => logid, :w => w)
    end

    def recv_calculate()
      result = receive_message(Calculate_result)
      return result.success unless result.success.nil?
      raise result.ouch unless result.ouch.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'calculate failed: unknown result')
    end

    def zip()
      send_zip()
    end

    def send_zip()
      send_message('zip', Zip_args)
    end
  end

  class Processor < SharedService::Processor 
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_add(seqid, iprot, oprot)
      args = read_args(iprot, Add_args)
      result = Add_result.new()
      result.success = @handler.add(args.num1, args.num2)
      write_result(result, oprot, 'add', seqid)
    end

    def process_calculate(seqid, iprot, oprot)
      args = read_args(iprot, Calculate_args)
      result = Calculate_result.new()
      begin
        result.success = @handler.calculate(args.logid, args.w)
      rescue InvalidOperation => ouch
        result.ouch = ouch
      end
      write_result(result, oprot, 'calculate', seqid)
    end

    def process_zip(seqid, iprot, oprot)
      args = read_args(iprot, Zip_args)
      @handler.zip()
      return
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Calculate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOGID = 1
    W = 2

    FIELDS = {
      LOGID => {:type => ::Thrift::Types::I32, :name => 'logid'},
      W => {:type => ::Thrift::Types::STRUCT, :name => 'w', :class => Work}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Calculate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    OUCH = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => InvalidOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Zip_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Zip_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

