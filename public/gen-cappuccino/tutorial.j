/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

@import <Foundation/Foundation.j>

@import <Thrift/Thrift.j>

@import "shared.j"


// enum Operation
Operation_ADD = 1;
Operation_SUBTRACT = 2;
Operation_MULTIPLY = 3;
Operation_DIVIDE = 4;

INT32CONSTANT = 9853;
MAPCONSTANT = nil;

@implementation tutorialConstants : CPObject {}
+ (void) initialize {
  MAPCONSTANT = [[CPDictionary alloc] initWithObjectsAndKeys: "world", "hello", "moon", "goodnight", nil];
}
+ (int) INT32CONSTANT{
  return INT32CONSTANT;
}
+ (CPDictionary) MAPCONSTANT{
  return MAPCONSTANT;
}
@end

@implementation Work : CPObject
{
  int __num1;
  int __num2;
  int __op;
  CPString __comment;

  BOOL __num1_isset;
  BOOL __num2_isset;
  BOOL __op_isset;
  BOOL __comment_isset;
}
- (id) initWithNum1: (int) num1 num2: (int) num2 op: (int) op comment: (CPString) comment
{
  self = [super init];
  __num1 = num1;
  __num1_isset = YES;
  __num2 = num2;
  __num2_isset = YES;
  __op = op;
  __op_isset = YES;
  __comment = [comment retain];
  __comment_isset = YES;
  return self;
}

- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"num1"])
  {
    __num1 = [decoder decodeInt32ForKey: @"num1"];
    __num1_isset = YES;
  }
  if ([decoder containsValueForKey: @"num2"])
  {
    __num2 = [decoder decodeInt32ForKey: @"num2"];
    __num2_isset = YES;
  }
  if ([decoder containsValueForKey: @"op"])
  {
    __op = [decoder decodeIntForKey: @"op"];
    __op_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment"])
  {
    __comment = [[decoder decodeObjectForKey: @"comment"] retain];
    __comment_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
  if (__num1_isset)
  {
    [encoder encodeInt32: __num1 forKey: @"num1"];
  }
  if (__num2_isset)
  {
    [encoder encodeInt32: __num2 forKey: @"num2"];
  }
  if (__op_isset)
  {
    [encoder encodeInt: __op forKey: @"op"];
  }
  if (__comment_isset)
  {
    [encoder encodeObject: __comment forKey: @"comment"];
  }
}

- (int) num1 {
  return __num1;
}

- (void) setNum1: (int) num1 {
  __num1 = num1;
  __num1_isset = YES;
}

- (BOOL) num1IsSet {
  return __num1_isset;
}

- (void) unsetNum1 {
  __num1_isset = NO;
}

- (int) num2 {
  return __num2;
}

- (void) setNum2: (int) num2 {
  __num2 = num2;
  __num2_isset = YES;
}

- (BOOL) num2IsSet {
  return __num2_isset;
}

- (void) unsetNum2 {
  __num2_isset = NO;
}

- (int) op {
  return __op;
}

- (void) setOp: (int) op {
  __op = op;
  __op_isset = YES;
}

- (BOOL) opIsSet {
  return __op_isset;
}

- (void) unsetOp {
  __op_isset = NO;
}

- (CPString) comment {
  return __comment;
}

- (void) setComment: (CPString) comment {
  __comment = comment;
  __comment_isset = YES;
}

- (BOOL) commentIsSet {
  return __comment_isset;
}

- (void) unsetComment {
  __comment = nil;
  __comment_isset = NO;
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setNum1: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setNum2: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setOp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          var fieldValue = [inProtocol readString];
          [self setComment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: "Work"];
  if (__num1_isset) {
    [outProtocol writeFieldBeginWithName: "num1" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __num1];
    [outProtocol writeFieldEnd];
  }
  if (__num2_isset) {
    [outProtocol writeFieldBeginWithName: "num2" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __num2];
    [outProtocol writeFieldEnd];
  }
  if (__op_isset) {
    [outProtocol writeFieldBeginWithName: "op" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __op];
    [outProtocol writeFieldEnd];
  }
  if (__comment_isset) {
    if (__comment != nil) {
      [outProtocol writeFieldBeginWithName: "comment" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __comment];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "Work(";
  ms = ms + "num1:";
  ms = ms + [CPString stringWithFormat: "%i", __num1];
  ms = ms + ",num2:";
  ms = ms + [CPString stringWithFormat: "%i", __num2];
  ms = ms + ",op:";
  ms = ms + [CPString stringWithFormat: "%i", __op];
  ms = ms + ",comment:";
  ms = ms + [CPString stringWithFormat: "\"%@\"", __comment];
  ms = ms + ")";
  return ms;
}

@end

@implementation InvalidOperation : TException
{
  int __what;
  CPString __why;

  BOOL __what_isset;
  BOOL __why_isset;
}
- (id) init
{
  return [super initWithName: @"InvalidOperation" reason: @"unknown" userInfo: nil];
}
- (id) initWithWhat: (int) what why: (CPString) why
{
  self = [self init];
  __what = what;
  __what_isset = YES;
  __why = [why retain];
  __why_isset = YES;
  return self;
}

- (id) initWithCoder: (CPCoder) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"what"])
  {
    __what = [decoder decodeInt32ForKey: @"what"];
    __what_isset = YES;
  }
  if ([decoder containsValueForKey: @"why"])
  {
    __why = [[decoder decodeObjectForKey: @"why"] retain];
    __why_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
  [super encodeWithCoder: encoder];
  if (__what_isset)
  {
    [encoder encodeInt32: __what forKey: @"what"];
  }
  if (__why_isset)
  {
    [encoder encodeObject: __why forKey: @"why"];
  }
}

- (int) what {
  return __what;
}

- (void) setWhat: (int) what {
  __what = what;
  __what_isset = YES;
}

- (BOOL) whatIsSet {
  return __what_isset;
}

- (void) unsetWhat {
  __what_isset = NO;
}

- (CPString) why {
  return __why;
}

- (void) setWhy: (CPString) why {
  __why = why;
  __why_isset = YES;
}

- (BOOL) whyIsSet {
  return __why_isset;
}

- (void) unsetWhy {
  __why = nil;
  __why_isset = NO;
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setWhat: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          var fieldValue = [inProtocol readString];
          [self setWhy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: "InvalidOperation"];
  if (__what_isset) {
    [outProtocol writeFieldBeginWithName: "what" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __what];
    [outProtocol writeFieldEnd];
  }
  if (__why_isset) {
    if (__why != nil) {
      [outProtocol writeFieldBeginWithName: "why" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __why];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "InvalidOperation(";
  ms = ms + "what:";
  ms = ms + [CPString stringWithFormat: "%i", __what];
  ms = ms + ",why:";
  ms = ms + [CPString stringWithFormat: "\"%@\"", __why];
  ms = ms + ")";
  return ms;
}

@end

@implementation ping_args : CPObject
{
}
- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: "ping_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "ping_args(";
  ms = ms + ")";
  return ms;
}

@end

@implementation Ping_result : CPObject
{
}
- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: @"Ping_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "Ping_result(";
  ms = ms + ")";
  return ms;
}

@end

@implementation add_args : CPObject
{
  int __num1;
  int __num2;

  BOOL __num1_isset;
  BOOL __num2_isset;
}
- (id) initWithNum1: (int) num1 num2: (int) num2
{
  self = [super init];
  __num1 = num1;
  __num1_isset = YES;
  __num2 = num2;
  __num2_isset = YES;
  return self;
}

- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"num1"])
  {
    __num1 = [decoder decodeInt32ForKey: @"num1"];
    __num1_isset = YES;
  }
  if ([decoder containsValueForKey: @"num2"])
  {
    __num2 = [decoder decodeInt32ForKey: @"num2"];
    __num2_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
  if (__num1_isset)
  {
    [encoder encodeInt32: __num1 forKey: @"num1"];
  }
  if (__num2_isset)
  {
    [encoder encodeInt32: __num2 forKey: @"num2"];
  }
}

- (int) num1 {
  return __num1;
}

- (void) setNum1: (int) num1 {
  __num1 = num1;
  __num1_isset = YES;
}

- (BOOL) num1IsSet {
  return __num1_isset;
}

- (void) unsetNum1 {
  __num1_isset = NO;
}

- (int) num2 {
  return __num2;
}

- (void) setNum2: (int) num2 {
  __num2 = num2;
  __num2_isset = YES;
}

- (BOOL) num2IsSet {
  return __num2_isset;
}

- (void) unsetNum2 {
  __num2_isset = NO;
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setNum1: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setNum2: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: "add_args"];
  if (__num1_isset) {
    [outProtocol writeFieldBeginWithName: "num1" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __num1];
    [outProtocol writeFieldEnd];
  }
  if (__num2_isset) {
    [outProtocol writeFieldBeginWithName: "num2" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __num2];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "add_args(";
  ms = ms + "num1:";
  ms = ms + [CPString stringWithFormat: "%i", __num1];
  ms = ms + ",num2:";
  ms = ms + [CPString stringWithFormat: "%i", __num2];
  ms = ms + ")";
  return ms;
}

@end

@implementation Add_result : CPObject
{
  int __success;

  BOOL __success_isset;
}
- (id) initWithSuccess: (int) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (int) success {
  return __success;
}

- (void) setSuccess: (int) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: @"Add_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "Add_result(";
  ms = ms + "success:";
  ms = ms + [CPString stringWithFormat: "%i", __success];
  ms = ms + ")";
  return ms;
}

@end

@implementation calculate_args : CPObject
{
  int __logid;
  Work __w;

  BOOL __logid_isset;
  BOOL __w_isset;
}
- (id) initWithLogid: (int) logid w: (Work) w
{
  self = [super init];
  __logid = logid;
  __logid_isset = YES;
  __w = [w retain];
  __w_isset = YES;
  return self;
}

- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"logid"])
  {
    __logid = [decoder decodeInt32ForKey: @"logid"];
    __logid_isset = YES;
  }
  if ([decoder containsValueForKey: @"w"])
  {
    __w = [[decoder decodeObjectForKey: @"w"] retain];
    __w_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
  if (__logid_isset)
  {
    [encoder encodeInt32: __logid forKey: @"logid"];
  }
  if (__w_isset)
  {
    [encoder encodeObject: __w forKey: @"w"];
  }
}

- (int) logid {
  return __logid;
}

- (void) setLogid: (int) logid {
  __logid = logid;
  __logid_isset = YES;
}

- (BOOL) logidIsSet {
  return __logid_isset;
}

- (void) unsetLogid {
  __logid_isset = NO;
}

- (Work) w {
  return __w;
}

- (void) setW: (Work) w {
  __w = w;
  __w_isset = YES;
}

- (BOOL) wIsSet {
  return __w_isset;
}

- (void) unsetW {
  __w = nil;
  __w_isset = NO;
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setLogid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          var fieldValue = [[Work alloc] init];
          [fieldValue read: inProtocol];
          [self setW: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: "calculate_args"];
  if (__logid_isset) {
    [outProtocol writeFieldBeginWithName: "logid" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __logid];
    [outProtocol writeFieldEnd];
  }
  if (__w_isset) {
    if (__w != nil) {
      [outProtocol writeFieldBeginWithName: "w" type: TType_STRUCT fieldID: 2];
      [__w write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "calculate_args(";
  ms = ms + "logid:";
  ms = ms + [CPString stringWithFormat: "%i", __logid];
  ms = ms + ",w:";
  ms = ms + [CPString stringWithFormat: "%@", __w];
  ms = ms + ")";
  return ms;
}

@end

@implementation Calculate_result : CPObject
{
  int __success;
  InvalidOperation __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}
- (id) initWithSuccess: (int) success ouch: (InvalidOperation) ouch
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __ouch = [ouch retain];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (int) success {
  return __success;
}

- (void) setSuccess: (int) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (InvalidOperation) ouch {
  return __ouch;
}

- (void) setOuch: (InvalidOperation) ouch {
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          var fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: @"Calculate_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "Calculate_result(";
  ms = ms + "success:";
  ms = ms + [CPString stringWithFormat: "%i", __success];
  ms = ms + ",ouch:";
  ms = ms + [CPString stringWithFormat: "%@", __ouch];
  ms = ms + ")";
  return ms;
}

@end

@implementation zip_args : CPObject
{
}
- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: "zip_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "zip_args(";
  ms = ms + ")";
  return ms;
}

@end

@implementation CalculatorClient : CPObject
{
  TProtocol inProtocol;
  TProtocol outProtocol;
}

- (id) initWithProtocol: (TProtocol) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (TProtocol) anInProtocol outProtocol: (TProtocol) anOutProtocol
{
  [super init];
  inProtocol = anInProtocol;
  outProtocol = anOutProtocol;
  return self;
}

- (void) send_ping
{
  [outProtocol writeMessageBeginWithName: @"ping" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ping_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_ping
{
  var msgType = 0;
  var messageBegin = [inProtocol readMessageBeginReturningNameTypeSequenceID];
  msgType = messageBegin[1];
  if (msgType == TMessageType_EXCEPTION) {
    var x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    throw x;
  }
  var result = [[Ping_result alloc] init];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) ping
{
  [self send_ping];
  [self recv_ping];
}

- (void) pingWithTarget: (id) target successAction: (SEL) successAction failureAction: (SEL) failureAction
{
  [[outProtocol transport] setRequestFinishedCallack:function(error)
  {
    var result = nil;
    if (error == nil)
    {
      try
      {
        result = [self recv_ping];
      }
      catch (e)
      {
        error = e;
      }
    }
    if (error == nil)
    {
        [target performSelector:successAction withObject:self withObject:result];
    }
    else
    {
      [target performSelector:failureAction withObject:self withObject:error];
    }
  }];
  [self send_ping];
}

- (void) send_addWithNum1: (int) num1 num2: (int) num2
{
  [outProtocol writeMessageBeginWithName: @"add" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"add_args"];
  [outProtocol writeFieldBeginWithName: @"num1" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: num1];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"num2" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: num2];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int) recv_add
{
  var msgType = 0;
  var messageBegin = [inProtocol readMessageBeginReturningNameTypeSequenceID];
  msgType = messageBegin[1];
  if (msgType == TMessageType_EXCEPTION) {
    var x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    throw x;
  }
  var result = [[Add_result alloc] init];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"add failed: unknown result"];
}

- (int) addWithNum1: (int) num1 num2: (int) num2
{
  [self send_addWithNum1: num1 num2: num2 ];
  return [self recv_add];
}

- (int) addWithNum1: (int) num1 num2: (int) num2 target: (id) target successAction: (SEL) successAction failureAction: (SEL) failureAction
{
  [[outProtocol transport] setRequestFinishedCallack:function(error)
  {
    var result = nil;
    if (error == nil)
    {
      try
      {
        result = [self recv_add];
      }
      catch (e)
      {
        error = e;
      }
    }
    if (error == nil)
    {
        [target performSelector:successAction withObject:self withObject:result];
    }
    else
    {
      [target performSelector:failureAction withObject:self withObject:error];
    }
  }];
  [self send_addWithNum1: num1 num2: num2 ];
}

- (void) send_calculateWithLogid: (int) logid w: (Work) w
{
  [outProtocol writeMessageBeginWithName: @"calculate" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"calculate_args"];
  [outProtocol writeFieldBeginWithName: @"logid" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: logid];
  [outProtocol writeFieldEnd];
  if (w != nil)  {
    [outProtocol writeFieldBeginWithName: @"w" type: TType_STRUCT fieldID: 2];
    [w write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int) recv_calculate
{
  var msgType = 0;
  var messageBegin = [inProtocol readMessageBeginReturningNameTypeSequenceID];
  msgType = messageBegin[1];
  if (msgType == TMessageType_EXCEPTION) {
    var x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    throw x;
  }
  var result = [[Calculate_result alloc] init];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    throw [result ouch];
  }
  throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"calculate failed: unknown result"];
}

- (int) calculateWithLogid: (int) logid w: (Work) w
{
  [self send_calculateWithLogid: logid w: w ];
  return [self recv_calculate];
}

- (int) calculateWithLogid: (int) logid w: (Work) w target: (id) target successAction: (SEL) successAction failureAction: (SEL) failureAction
{
  [[outProtocol transport] setRequestFinishedCallack:function(error)
  {
    var result = nil;
    if (error == nil)
    {
      try
      {
        result = [self recv_calculate];
      }
      catch (e)
      {
        error = e;
      }
    }
    if (error == nil)
    {
        [target performSelector:successAction withObject:self withObject:result];
    }
    else
    {
      [target performSelector:failureAction withObject:self withObject:error];
    }
  }];
  [self send_calculateWithLogid: logid w: w ];
}

- (void) send_zip
{
  [outProtocol writeMessageBeginWithName: @"zip" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"zip_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) zip
{
  [self send_zip];
}

- (void) zipWithTarget: (id) target successAction: (SEL) successAction failureAction: (SEL) failureAction
{
  [[outProtocol transport] setRequestFinishedCallack:function(error)
  {
    var result = nil;
    if (error == nil)
    {
      try
      {
        result = [self recv_zip];
      }
      catch (e)
      {
        error = e;
      }
    }
    if (error == nil)
    {
        [target performSelector:successAction withObject:self withObject:result];
    }
    else
    {
      [target performSelector:failureAction withObject:self withObject:error];
    }
  }];
  [self send_zip];
}

@end

@implementation CalculatorProcessor : CPObject
{
  Calculator mService;
  CPDictionary mMethodMap;
}

- (id) initWithCalculator: (Calculator) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[CPDictionary dictionary] retain];
  {
    var s = @selector(process_ping_withSequenceID:inProtocol:outProtocol:);
    var sig = [self methodSignatureForSelector: s];
    var invocation = [CPInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [mMethodMap setValue: invocation forKey: @"ping"];
  }
  {
    var s = @selector(process_add_withSequenceID:inProtocol:outProtocol:);
    var sig = [self methodSignatureForSelector: s];
    var invocation = [CPInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [mMethodMap setValue: invocation forKey: @"add"];
  }
  {
    var s = @selector(process_calculate_withSequenceID:inProtocol:outProtocol:);
    var sig = [self methodSignatureForSelector: s];
    var invocation = [CPInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [mMethodMap setValue: invocation forKey: @"calculate"];
  }
  {
    var s = @selector(process_zip_withSequenceID:inProtocol:outProtocol:);
    var sig = [self methodSignatureForSelector: s];
    var invocation = [CPInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [mMethodMap setValue: invocation forKey: @"zip"];
  }
  return self;
}

- (Calculator) service
{
  return mService;
}

- (BOOL) processOnInputProtocol: (TProtocol) inProtocol
                 outputProtocol: (TProtocol) outProtocol
{
  var messageName;
  var messageType;
  var seqID;
  var messageBegin = [inProtocol readMessageBeginReturningNameTypeSequenceID]
  messageName = messageBegin[0];
  messageType = messageBegin[1];
  seqID = messageBegin[2];
  var invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    var x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [CPString stringWithFormat: "Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  var i = [CPInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: seqID atIndex: 2];
  [i setArgument: inProtocol atIndex: 3];
  [i setArgument: outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_ping_withSequenceID: (int) seqID inProtocol: (TProtocol) inProtocol outProtocol: (TProtocol) outProtocol
{
  var args = [[ping_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  var result = [[Ping_result alloc] init];
  [mService ping];
  [outProtocol writeMessageBeginWithName: "ping"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) process_add_withSequenceID: (int) seqID inProtocol: (TProtocol) inProtocol outProtocol: (TProtocol) outProtocol
{
  var args = [[add_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  var result = [[Add_result alloc] init];
  [result setSuccess: [mService addWithNum1: [args num1] num2: [args num2]]];
  [outProtocol writeMessageBeginWithName: "add"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) process_calculate_withSequenceID: (int) seqID inProtocol: (TProtocol) inProtocol outProtocol: (TProtocol) outProtocol
{
  var args = [[calculate_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  var result = [[Calculate_result alloc] init];
  [result setSuccess: [mService calculateWithLogid: [args logid] w: [args w]]];
  [outProtocol writeMessageBeginWithName: "calculate"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) process_zip_withSequenceID: (int) seqID inProtocol: (TProtocol) inProtocol outProtocol: (TProtocol) outProtocol
{
  var args = [[zip_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  var result = [[Zip_result alloc] init];
  [mService zip];
  [outProtocol writeMessageBeginWithName: "zip"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}
@end


