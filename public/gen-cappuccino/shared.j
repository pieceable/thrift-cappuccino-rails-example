/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

@import <Foundation/Foundation.j>

@import <Thrift/Thrift.j>




@implementation sharedConstants : CPObject {}
+ (void) initialize {
}
@end

@implementation SharedStruct : CPObject
{
  int __key;
  CPString __value;

  BOOL __key_isset;
  BOOL __value_isset;
}
- (id) initWithKey: (int) key value: (CPString) value
{
  self = [super init];
  __key = key;
  __key_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [decoder decodeInt32ForKey: @"key"];
    __key_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
  if (__key_isset)
  {
    [encoder encodeInt32: __key forKey: @"key"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
}

- (int) key {
  return __key;
}

- (void) setKey: (int) key {
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  __key_isset = NO;
}

- (CPString) value {
  return __value;
}

- (void) setValue: (CPString) value {
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  __value = nil;
  __value_isset = NO;
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          var fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: "SharedStruct"];
  if (__key_isset) {
    [outProtocol writeFieldBeginWithName: "key" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __key];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: "value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "SharedStruct(";
  ms = ms + "key:";
  ms = ms + [CPString stringWithFormat: "%i", __key];
  ms = ms + ",value:";
  ms = ms + [CPString stringWithFormat: "\"%@\"", __value];
  ms = ms + ")";
  return ms;
}

@end

@implementation getStruct_args : CPObject
{
  int __key;

  BOOL __key_isset;
}
- (id) initWithKey: (int) key
{
  self = [super init];
  __key = key;
  __key_isset = YES;
  return self;
}

- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [decoder decodeInt32ForKey: @"key"];
    __key_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
  if (__key_isset)
  {
    [encoder encodeInt32: __key forKey: @"key"];
  }
}

- (int) key {
  return __key;
}

- (void) setKey: (int) key {
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  __key_isset = NO;
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          var fieldValue = [inProtocol readI32];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: "getStruct_args"];
  if (__key_isset) {
    [outProtocol writeFieldBeginWithName: "key" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __key];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "getStruct_args(";
  ms = ms + "key:";
  ms = ms + [CPString stringWithFormat: "%i", __key];
  ms = ms + ")";
  return ms;
}

@end

@implementation GetStruct_result : CPObject
{
  SharedStruct __success;

  BOOL __success_isset;
}
- (id) initWithSuccess: (SharedStruct) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (CPCoder) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (CPCoder) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (SharedStruct) success {
  return __success;
}

- (void) setSuccess: (SharedStruct) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success = nil;
  __success_isset = NO;
}

- (void) read: (TProtocol) inProtocol
{
  var fieldName;
  var fieldType;
  var fieldID;

  [inProtocol readStructBeginReturningName];
  while (true)
  {
    var fieldBegin = [inProtocol readFieldBeginReturningNameTypeFieldID];
    fieldName = fieldBegin[0];
    fieldType = fieldBegin[1];
    fieldID = fieldBegin[2];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          var fieldValue = [[SharedStruct alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (TProtocol) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStruct_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (CPString) description {
  var ms = "GetStruct_result(";
  ms = ms + "success:";
  ms = ms + [CPString stringWithFormat: "%@", __success];
  ms = ms + ")";
  return ms;
}

@end

@implementation SharedServiceClient : CPObject
{
  TProtocol inProtocol;
  TProtocol outProtocol;
}

- (id) initWithProtocol: (TProtocol) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (TProtocol) anInProtocol outProtocol: (TProtocol) anOutProtocol
{
  [super init];
  inProtocol = anInProtocol;
  outProtocol = anOutProtocol;
  return self;
}

- (void) send_getStructWithKey: (int) key
{
  [outProtocol writeMessageBeginWithName: @"getStruct" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getStruct_args"];
  [outProtocol writeFieldBeginWithName: @"key" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: key];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SharedStruct) recv_getStruct
{
  var msgType = 0;
  var messageBegin = [inProtocol readMessageBeginReturningNameTypeSequenceID];
  msgType = messageBegin[1];
  if (msgType == TMessageType_EXCEPTION) {
    var x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    throw x;
  }
  var result = [[GetStruct_result alloc] init];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getStruct failed: unknown result"];
}

- (SharedStruct) getStructWithKey: (int) key
{
  [self send_getStructWithKey: key ];
  return [self recv_getStruct];
}

- (SharedStruct) getStructWithKey: (int) key target: (id) target successAction: (SEL) successAction failureAction: (SEL) failureAction
{
  [[outProtocol transport] setRequestFinishedCallack:function(error)
  {
    var result = nil;
    if (error == nil)
    {
      try
      {
        result = [self recv_getStruct];
      }
      catch (e)
      {
        error = e;
      }
    }
    if (error == nil)
    {
        [target performSelector:successAction withObject:self withObject:result];
    }
    else
    {
      [target performSelector:failureAction withObject:self withObject:error];
    }
  }];
  [self send_getStructWithKey: key ];
}

@end

@implementation SharedServiceProcessor : CPObject
{
  SharedService mService;
  CPDictionary mMethodMap;
}

- (id) initWithSharedService: (SharedService) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[CPDictionary dictionary] retain];
  {
    var s = @selector(process_getStruct_withSequenceID:inProtocol:outProtocol:);
    var sig = [self methodSignatureForSelector: s];
    var invocation = [CPInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [mMethodMap setValue: invocation forKey: @"getStruct"];
  }
  return self;
}

- (SharedService) service
{
  return mService;
}

- (BOOL) processOnInputProtocol: (TProtocol) inProtocol
                 outputProtocol: (TProtocol) outProtocol
{
  var messageName;
  var messageType;
  var seqID;
  var messageBegin = [inProtocol readMessageBeginReturningNameTypeSequenceID]
  messageName = messageBegin[0];
  messageType = messageBegin[1];
  seqID = messageBegin[2];
  var invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    var x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [CPString stringWithFormat: "Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  var i = [CPInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: seqID atIndex: 2];
  [i setArgument: inProtocol atIndex: 3];
  [i setArgument: outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getStruct_withSequenceID: (int) seqID inProtocol: (TProtocol) inProtocol outProtocol: (TProtocol) outProtocol
{
  var args = [[getStruct_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  var result = [[GetStruct_result alloc] init];
  [result setSuccess: [mService getStructWithKey: [args key]]];
  [outProtocol writeMessageBeginWithName: "getStruct"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}
@end


